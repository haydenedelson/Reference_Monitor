"""
Hayden Edelson
Information Security and Privacy
Professor Gallagher
Assignment 1: Reference Monitor

Note:
    This security layer uses encasementlib.r2py, restrictions.default, repy.py and Python
    Also you need to give it an application to run.
    python repy.py restrictions.default encasementlib.r2py [security_layer].r2py [attack_program].r2py 
    
""" 
    
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def __init__(self,filename,create):
    # globals
    mycontext['debug'] = False   
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'

    # Any time create new file, create new Bfile for writing
    if create:
      self.Bfile = openfile(self.Bfn, create)
      
      # If Afile already in directory, open existing Afile -> will be overwritten
      if self.Afn in listfiles():
        self.Afile = openfile(self.Afn, create)
      
      # If Afile not in directory, create new Afile -> write 'SE'
      else:
        self.Afile = openfile(self.Afn, create)
        self.Afile.writeat('SE', 0)
    
    # Not creating new file -> open existing Afile, create new Bfile & copy contents of Afile to it
    else:
      self.Afile = openfile(self.Afn, False)
      self.Bfile = openfile(self.Bfn, True)
      self.Bfile.writeat(self.Afile.readat(None,0),0)

  def writeat(self, data, offset):
    mycontext['stoplock'].acquire()
    try:
      self.Bfile.writeat(data, offset)
      mycontext['stoplock'].release()
    
    # Releases lock if exception raised
    except:
      mycontext['stoplock'].release()
      return
  
  def readat(self, bytes, offset):
    mycontext['stoplock'].acquire()
    try:
      read_data = self.Afile.readat(bytes, offset)
      mycontext['stoplock'].release()
      return read_data
      
    # Releases lock if exception raised, returns nothing
    except:
      mycontext['stoplock'].release()
      return

  def close(self):
    bfile_content = self.Bfile.readat(None, 0)
    
    # If Bfile is valid, copy Bfile content to Afile
    if (bfile_content[0] == 'S' and bfile_content[-1] == 'E'):
      self.Afile.close()
      removefile(self.Afn)
      self.Afile = openfile(self.Afn, True)
      self.Afile.writeat(bfile_content, 0)
    
    # If Bfile is not valid, do nothing. Close files.
    self.Afile.close()
    self.Bfile.close()
    removefile(self.Bfn)


def ABopenfile(filename, create):
  return ABFile(filename,create)

# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,(int,long)),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,long,type(None)),(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()
