# Test Case 1
# Write completely invalid text to file
# Clean files
if "testfile.txt.a" in listfiles():
  removefile('testfile.txt.a')
if "testfile.txt.b" in listfiles():
  removefile('testfile.txt.b')
  
# Write completely invalid text to file
file = ABopenfile('testfile.txt', True)
file.writeat('invalid', 0)
file.close()

# Check contents -> file should have "SE"
file = ABopenfile('testfile.txt', False)
try:
  assert('SE' == file.readat(None, 0))
  file.close()
except:
  log("SECURITY COMPROMISED: Invalid write operation is not handled properly")
  file.close()

# Test Case 2
# Write almost valid text to file
# Clean files
if "testfile.txt.a" in listfiles():
  removefile('testfile.txt.a')
if "secfile.txt.b" in listfiles():
  removefile('testfile.txt.b')

# Write almost valid text to file
file = ABopenfile('testfile.txt', True)
file.writeat('S is this valid?', 0)
file.close()

# Check contents -> file should have "SE"
file = ABopenfile('testfile.txt', False)
try:
  assert('SE' == file.readat(None, 0))
  file.close()
except:
  log("SECURITY COMPROMISED: Invalid write operation is not handled properly")
  file.close()

# Reopen file, try different almost valid write
file = ABopenfile('testfile.txt', False)
file.writeat('is this valid? EEE', 0)
file.close()

# Check contents -> file should have "SE"
file = ABopenfile('testfile.txt', False)
try:
  assert('SE' == file.readat(None, 0))
  file.close()
except:
  log("SECURITY COMPROMISED: Invalid write operation is not handled properly")
  file.close()

# Test Case 3
# Write past end of file
# Clean files
if "secfile.txt.a" in listfiles():
  removefile('testfile.txt.a')
if "secfile.txt.b" in listfiles():
  removefile('testfile.txt.b')

# Write past end of file
file = ABopenfile('testfile.txt', True)
try:
  file.writeat('SE', 100)
  file.close()
except:
  log("Write past EOF error")
  file.close()

# Test Case 4
# Write before beginning of file
# Clean files
if "testfile.txt.a" in listfiles():
  removefile('testfile.txt.a')
if "testfile.txt.b" in listfiles():
  removefile('testfile.txt.b')

# Write before beginning of file
file = ABopenfile('testfile.txt', True)
try:
  file.writeat('SE', -100)
  file.close()
except:
  log("Negative index error")
  file.close()

# Test Case 5
# Write invalid data via a valid variable name
# Clean files
if "testfile.txt.a" in listfiles():
  removefile('testfile.txt.a')
if "testfile.txt.b" in listfiles():
  removefile('testfile.txt.b')

# Write invalid data via a valid variable name
SdataE = "invalid text"

file = ABopenfile('testfile.txt', True)
file.writeat(SdataE, 0)
file.close()

# Check contents -> file should have "SE"
file = ABopenfile('testfile.txt', False)
try:
  assert('SE' == file.readat(None, 0))
  file.close()
except:
  log("SECURITY COMPROMISED: Invalid write operation is not handled properly")
  file.close()

# Test Case 6
# Test threading capabalities
# Clean files
if "testfile.txt.a" in listfiles():
  removefile('testfile.txt.a')
if "testfile.txt.b" in listfiles():
  removefile('testfile.txt.b')
  
def file_confusion():
  try:
    target = ABopenfile('testfile.txt', True)
    # Write valid data to the file
    target.writeat('StestE', 0)
    target.close()
    
    # Reopen, attempt rewrite
    target = ABopenfile('testfile.txt', False)
    target.writeat('INVALID DATA', 0)
    target.close()
  except:
    log("Thread hack failed")
    
# Attempt normal write operation, call threads, try to facilitate threading error
file = ABopenfile('testfile.txt', True)
file.writeat('StestE', 0)

try:
  for i in range(10):
    createthread(file_confusion)
except:
  log("Couldn't create thread")

try:
  file.close()
except:
  log("SECURITY COMPROMISED: File close failed")

# Wait for threads to finish
sleep(3)

try:
  file = ABopenfile('testfile.txt', False)
  assert('StestE' == file.readat(None, 0))
  file.close()
except:
  log("SECURITY COMPROMISED: Allowed invalid write operation with use of threading")
  file.close()
